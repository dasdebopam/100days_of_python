'''
Love Babbar

Question:
Given an array of N integers arr[] 
where each element represents the max length of the jump that can be made forward from that element. 
Find the minimum number of jumps to reach the end of the array (starting from the first element). 
If an element is 0, then you cannot move through that element.

Input:
N = 11 
arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} 

Output:
3 

'''
#User function Template for python3
class Solution:
	def minJumps(self, arr, n):
	    #code here
	    jump=0
        value=0
        while value<n:
            value=arr[value]
            #print("value",value)
            value=value+value
            jump=jump+1
            #print("jump",jump)
        return(jump)


#{ 
 # Driver Code Starts
#Initial Template for Python 3
if __name__ == '__main__':
	T=int(input())
	for i in range(T):
		n = int(input())
		Arr = [int(x) for x in input().split()]
		ob = Solution()
		ans = ob.minJumps(Arr,n)
		print(ans)
# } Driver Code Ends
'''
Thought:
ALTHOUGH I MANGED TO FIND THE SOLUTION
IT EXCEEDED PERMISSIBLE TIME LIMIT 
NEED TO LEARN TIME COMPLEXITY
'''
