'''
Question:
Consider a list (list = []). You can perform the following commands:
insert i e: Insert integer  at position .
print: Print the list.
remove e: Delete the first occurrence of integer .
append e: Insert integer  at the end of the list.
sort: Sort the list.
pop: Pop the last element from the list.
reverse: Reverse the list.
Initialize your list and read in the value of  followed by  lines of commands 
where each command will be of the  types listed above. Iterate through each command in order 
and perform the corresponding operation on your list.

Input:
12
insert 0 5
insert 1 10
insert 0 6
print
remove 6
append 9
append 1
sort
print
pop
reverse
print

Output:
[6, 5, 10]
[1, 5, 9, 10]
[9, 5, 1]
'''
if __name__ == '__main__':
    N = int(input())				#no of commands
    L= []					#list
    for i in range(N):				#loop for simplicity
        k=input().split()				#taking input
        if k[0]=='insert':			#condition form nature of input
            L.insert(int(k[1]),int(k[2]))		#operation
            k.clear()				#clearing the input to avoid a mess
        elif k[0]=='remove':
            L.remove(int(k[1]))
            k.clear()
        elif k[0]=='append':
            L.append(int(k[1]))
            k.clear()
        elif k[0]=='sort':
            L.sort()
            k.clear() 
        elif k[0]=='pop':
            L.pop()
            k.clear()
        elif k[0]=='reverse':
            L.reverse()
            k.clear()
        else:
            print(L)
            k.clear()
            
    
'''
Thoughts:
thought the progam is quite simple it would have been made much easier
if the commands could have passed without them being conditiond checked 
and in process the length of program could be reduced 
'''
